summarise(teste_pred)
summary(teste_pred)
dim(teste_pred)
# Valores preditos
teste_pred = predict(tree, teste)
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree,
box.palette = paleta) # Paleta de cores
# Valores preditos
teste_pred = predict(tree, teste)
# Valores preditos
teste_pred = predict(tree, teste)
tree <- rpart(HIPERTENSO~.,
data=teste,
control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree,
box.palette = paleta) # Paleta de cores
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste['r'] = teste$HIPERTENSO - teste_pred
# Valores esperados e observados
boost0_O_vs_E <- ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) + #Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
# guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
library(plotly)
library(plotly)
tree <- rpart(HIPERTENSO~.,
data=teste,
control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree,
box.palette = paleta) # Paleta de cores
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste['r'] = teste$HIPERTENSO - teste_pred
# Valores esperados e observados
boost0_O_vs_E <- ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) + #Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
# guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
boost0_O_vs_E
# Valores esperados e observados
boost0_O_vs_E <- ggplot(testeG, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) + #Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
# guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
boost0_O_vs_E
# Valores esperados e observados
boost0_O_vs_E <- ggplot(teste_pred, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) + #Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
# guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
boost0_O_vs_E
# Valores esperados e observados
boost0_O_vs_E <- ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) + #Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
# guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
boost0_O_vs_E
# Gráfico de resíduos
boost0_res <- ggplot(df, aes(x,r)) +
geom_point(alpha=.7, size=.5, aes(colour='Resíduo')) +
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
labs(title="Gráfico de resíduos") +
scale_y_continuous(name= "r") +
scale_x_continuous(name= "x")
boost0_res
ggpubr::ggarrange(boost0_O_vs_E, boost0_res,
# labels = c("A", "B"),
ncol = 2, nrow = 1)
# Criando o modelo
?rpart
?rpart.control
HIPER_tree <- rpart(HIPERTENSO ~ .,
data = teste,
method = "class", # Usa class pois o target e factor mais poderia ser "anova", "exp" ou "poisson"
parms = list(split = "information."), #The splitting index can be gini or information.
control = rpart.control(minsplit = 1))
# Visualizando o ganho de informação para cada atributo
HIPER_tree
# Gerando o plot
install.packages("rpart.plot")
install.packages("rpart.plot")
library(rpart.plot)
# Plot
?prp
prp(HIPER_tree, type = 0, extra = 1, under = TRUE, compress = TRUE)
teste %>% filter (teste$IDADE < 52 & teste$DIABETES == 0 & teste$HIPERTENSO == "HIPERT" )
teste %>% filter (teste$HIPERTENSO == "NAO_HIPER" & teste$IDADE >= 52)
# Carregando os pacotes
library(caret)
library(ROCR)
library(e1071)
library(readr)
testeG <- read_csv("testeG.csv")
View(testeG)
dim(testeG)
# balanceamento das variaveis
tes_hiper_G <- filter(testeG, HIPERTENSO == 1) # seleciona na amostra os HAS
dim(tes_hiper_G)
n_G<- filter(testeG, HIPERTENSO == 0) # seleciona na amostra os nao HAS
dim(n_G)
n_hper_G<-sample_frac(n_G, 0.60) # 60% de forma aleatoria
dim(n_hper_G)
tes_bal_G <- bind_rows(tes_hiper_G, n_hper_G)
dim(tes_bal_G)
testeG <- tes_bal_G[ ,-9] # retirado a variavel tuberculose
dim(testeG)
# Treinando o modelo
log.model <- glm(formula = HIPERTENSO ~ . , family = binomial(link ='logit'), data = testeG)
# Podemos ver que as variaveis Idade, Diabetes e Alcool sao as variaveis mais significantes
summary(log.model)
# Fazendo as previsoes nos dados de teste
library(caTools)
set.seed(4444)
# Split dos dados, de forma aleatoria seleciona 70% da amostra
split = sample.split(testeG$HIPERTENSO, SplitRatio = 0.70)
# os que se encontra como TRUE sao os emementos que foram selecionados
table(split)
# Datasets de treino e de teste
dados_treino= subset(testeG, split == TRUE) # 70% da amostra
dados_teste= subset(testeG, split == FALSE) # 30% da amostra
# Gerando o modelo com a versao final do dataset
final.log.model <- glm(formula = HIPERTENSO ~., family = binomial(link='logit'), data = dados_treino)
# Resumo
summary(final.log.model)
# Prevendo a acuracia
fitted.probabilities <- predict(final.log.model, newdata = dados_teste, type = 'response')
# Calculando os valores
fitted.results <- ifelse(fitted.probabilities > 0.5, 1, 0)
# Conseguimos em torna de 82% de acuracia
misClasificError <- mean(fitted.results != dados_teste$HIPERTENSO)
print(paste('Acuracia', 1-misClasificError))
# Criando a confusion matrix
table(dados_teste$HIPERTENSO, fitted.probabilities > 0.5)
#------------------------Arvore de Decisão---------------------------------
# Carregando o pacote
install.packages("rpart")
install.packages("rpart")
library(rpart)
tree <- rpart(HIPERTENSO~., data=teste, control=rpart.control(maxdepth = 4, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree, box.palette = paleta) # Paleta de cores
tree <- rpart(HIPERTENSO~., data=teste, control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree, box.palette = paleta) # Paleta de cores
tree <- rpart(HIPERTENSO~., data=teste, control=rpart.control(maxdepth = 4, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree, box.palette = paleta) # Paleta de cores
tree <- rpart(HIPERTENSO~., data=teste, control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree, box.palette = paleta) # Paleta de cores
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste_pred
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste['r'] <- teste_pred[,1] - teste_pred[,2]
teste['prev'] <- ifelse(teste$r > 0, 1, 0)
misClasificError <- mean(teste$prev != testeG$HIPERTENSO)
print(paste('Acuracia', 1-misClasificError))
#------------------------Arvore de Decisão---------------------------------
# Carregando o pacote
install.packages("rpart")
install.packages("rpart")
library(rpart)
set.seed(4444)
tree <- rpart(HIPERTENSO~., data=teste, control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree, box.palette = paleta) # Paleta de cores
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste['r'] <- teste_pred[,1] - teste_pred[,2]
teste['prev'] <- ifelse(teste$r > 0, 1, 0)
misClasificError <- mean(teste$prev != testeG$HIPERTENSO)
print(paste('Acuracia', 1-misClasificError))
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste_prev <- teste_pred[,1] - teste_pred[,2]
previsa <- ifelse(teste$r > 0, 1, 0)
misClasificError <- mean(previsa != testeG$HIPERTENSO)
print(paste('Acuracia', 1-misClasificError))
# Carregando os pacotes
require(readr)
library(readr)
require(readxl)
library(readxl)
require(caret)
library(caret)
require(dplyr)
library(dplyr)
require(tidyverse)
library(tidyverse)
teste <- read_csv("teste.csv")
head(teste)
# verificar se existe NA no arquivo teste.csv
ver <- is.na(teste)
table(ver)
# transforma o arquivo em um data.frame
teste = data.frame(teste)
#Observar a estrutura do arquivo teste
glimpse(teste)
class(teste)
#transformar a variavel HIPERTENSO E IDADE EM FATOR
teste$HIPERTENSO<- as.factor(teste$HIPERTENSO)
teste$IDADE<- as.integer(teste$IDADE)
glimpse(teste)
class(teste)
tes_hiper<- filter(teste, HIPERTENSO == "HIPERT")
n<- filter(teste, HIPERTENSO == "NAO_HIPER")
n_hper<- n[1:400, ]
tes_bal = bind_rows(tes_hiper, n_hper)
#------------------------Arvore de Decisão---------------------------------
# Carregando o pacote
install.packages("rpart")
install.packages("rpart")
library(rpart)
set.seed(4444)
tree <- rpart(HIPERTENSO~., data=teste, control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree, box.palette = paleta) # Paleta de cores
#------------------------Arvore de Decisão---------------------------------
# Carregando o pacote
install.packages("rpart")
install.packages("rpart")
library(rpart)
set.seed(4444)
tree <- rpart(HIPERTENSO~., data=teste, control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree, box.palette = paleta) # Paleta de cores
tree <- rpart(HIPERTENSO~., data=teste, control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree, box.palette = paleta) # Paleta de cores
#------------------------Arvore de Decisão---------------------------------
# Carregando o pacote
install.packages("rpart")
install.packages("rpart")
library(rpart)
tree <- rpart(HIPERTENSO~.,
data=teste,
control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree,
box.palette = paleta) # Paleta de cores
View(teste)
teste <- read_csv("teste.csv")
head(teste)
# verificar se existe NA no arquivo teste.csv
ver <- is.na(teste)
table(ver)
# transforma o arquivo em um data.frame
teste = data.frame(teste)
#Observar a estrutura do arquivo teste
glimpse(teste)
class(teste)
#transformar a variavel HIPERTENSO E IDADE EM FATOR
teste$HIPERTENSO<- as.factor(teste$HIPERTENSO)
teste$IDADE<- as.integer(teste$IDADE)
glimpse(teste)
class(teste)
tes_hiper<- filter(teste, HIPERTENSO == "HIPERT")
n<- filter(teste, HIPERTENSO == "NAO_HIPER")
n_hper<- n[1:400, ]
tes_bal = bind_rows(tes_hiper, n_hper)
tree <- rpart(HIPERTENSO~.,
data=teste,
control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree,
box.palette = paleta) # Paleta de cores
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
previ= teste_pred[.1] - teste_pred[.2]
previ
previ<-teste_pred[.1] - teste_pred[.2]
previ
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
previ<-teste_pred[.1] - teste_pred[.2]
previ
tree <- rpart(HIPERTENSO~.,
data=teste,
control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree,
box.palette = paleta) # Paleta de cores
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
previ<-teste_pred[.1] - teste_pred[.2]
previ<- teste_pred[.1] - teste_pred[.2]
previ
r = teste_pred[0.1] - teste_pred[0.2]
r
teste['prev'] = teste_pred[0.1] - teste_pred[0.2]
teste['prev']
teste['r'] = teste_pred[0.1] - teste_pred[0.2]
View(teste)
teste_pred
teste_pred[0.1]
teste['r'] = teste$HIPERTENSO - teste_pred
teste$HIPERTENSO
teste_pred
dim(teste_pred)
teste['r'] = teste_pred[ .1] - teste_pred[ 2]
View(teste)
# Carregando os pacotes
require(readr)
library(readr)
require(readxl)
library(readxl)
require(caret)
library(caret)
require(dplyr)
library(dplyr)
require(tidyverse)
library(tidyverse)
teste <- read_csv("teste.csv")
head(teste)
# verificar se existe NA no arquivo teste.csv
ver <- is.na(teste)
table(ver)
# transforma o arquivo em um data.frame
teste = data.frame(teste)
#Observar a estrutura do arquivo teste
glimpse(teste)
class(teste)
#transformar a variavel HIPERTENSO E IDADE EM FATOR
teste$HIPERTENSO<- as.factor(teste$HIPERTENSO)
teste$IDADE<- as.integer(teste$IDADE)
glimpse(teste)
class(teste)
tes_hiper<- filter(teste, HIPERTENSO == "HIPERT")
n<- filter(teste, HIPERTENSO == "NAO_HIPER")
n_hper<- n[1:400, ]
tes_bal = bind_rows(tes_hiper, n_hper)
#transformar a variavel HIPERTENSO E IDADE EM FATOR
teste$HIPERTENSO<- as.factor(teste$HIPERTENSO)
teste$IDADE<- as.integer(teste$IDADE)
glimpse(teste)
class(teste)
tes_hiper<- filter(teste, HIPERTENSO == "HIPERT")
n<- filter(teste, HIPERTENSO == "NAO_HIPER")
n_hper<- n[1:400, ]
tes_bal = bind_rows(tes_hiper, n_hper)
#------------------------Arvore de Decisão---------------------------------
# Carregando o pacote
install.packages("rpart")
library(rpart)
install.packages("rpart")
tree <- rpart(HIPERTENSO~.,
data=teste,
control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree,
box.palette = paleta) # Paleta de cores
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste['r'] = teste$HIPERTENSO - teste_pred
teste['r']
tree <- rpart(HIPERTENSO~.,
data=teste,
control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree,
box.palette = paleta) # Paleta de cores
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste['r'] = teste$HIPERTENSO - teste_pred
teste$HIPERTENSO
teste_pred
teste['r'] = teste_pred[0.1] - teste_pred[0.2]
teste['r']
teste['r'] = teste_pred[.1] - teste_pred[.2]
teste
teste_pred[.1]
teste_pred[.2]
# Carregando os pacotes
require(readr)
library(readr)
require(readxl)
library(readxl)
require(caret)
library(caret)
require(dplyr)
library(dplyr)
require(tidyverse)
library(tidyverse)
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste_pred
teste_pred <- as.factor(teste_pred)
teste['r'] = teste_pred[.1] - teste_pred[.2]
teste_pred <- as.factor(teste_pred)
teste_pred
teste['r'] = teste_pred[.1] - teste_pred[.2]
# Valores esperados e observados
boost0_O_vs_E <- ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) + #Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
# guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
teste
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste_pred
teste_pred <- as.factor(teste_pred)
teste['r'] = teste_pred[.1] - teste_pred[.2]
teste['r'] = teste_pred[,1] - teste_pred[,2]
View(teste)
# verificar se existe NA no arquivo teste.csv
ver <- is.na(teste)
table(ver)
# transforma o arquivo em um data.frame
teste = data.frame(teste)
#Observar a estrutura do arquivo teste
glimpse(teste)
class(teste)
#transformar a variavel HIPERTENSO E IDADE EM FATOR
teste$HIPERTENSO<- as.factor(teste$HIPERTENSO)
teste$IDADE<- as.integer(teste$IDADE)
glimpse(teste)
class(teste)
tes_hiper<- filter(teste, HIPERTENSO == "HIPERT")
n<- filter(teste, HIPERTENSO == "NAO_HIPER")
n_hper<- n[1:400, ]
tes_bal = bind_rows(tes_hiper, n_hper)
library(rpart)
tree <- rpart(HIPERTENSO~.,
data=teste,
control=rpart.control(maxdepth = 3, cp=0))
# Plotando a árvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree,
box.palette = paleta) # Paleta de cores
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste['r'] = teste_pred[,1] - teste_pred[,2]
View(tes_bal)
View(ver)
View(teste_pred)
teste['r']
teste_pred[,1]
teste_pred
