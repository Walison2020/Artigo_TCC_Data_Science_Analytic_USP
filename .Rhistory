teste['r']
# Plotando a Ã¡rvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree,
box.palette = paleta) # Paleta de cores
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste['r'] = teste_pred[,1] - teste_pred[,2]
teste['r']
View(teste)
# Valores esperados e observados
boost0_O_vs_E <- ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) + #Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
# guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
boost0_O_vs_E
boost0_O_vs_E
# Carregando os pacotes
require(readr)
library(readr)
require(readxl)
library(readxl)
require(caret)
library(caret)
require(dplyr)
library(dplyr)
require(tidyverse)
library(tidyverse)
teste <- read_csv("teste.csv")
local(source("c:\\Users\\walis\\.vscode\\extensions\\ikuyadeu.r-2.4.0\\R\\session\\init.R", chdir = TRUE, local = TRUE))
library(ggplot2)
# Valores esperados e observados
boost0_O_vs_E <- ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) + #Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
# guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
boost0_O_vs_E
# GrÃ¡fico de resÃ­duos
boost0_res <- ggplot(df, aes(x,r)) +
geom_point(alpha=.7, size=.5, aes(colour='ResÃ­duo')) +
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
labs(title="GrÃ¡fico de resÃ­duos") +
scale_y_continuous(name= "r") +
scale_x_continuous(name= "x")
boost0_res
ggpubr::ggarrange(boost0_O_vs_E, boost0_res,
# labels = c("A", "B"),
ncol = 2, nrow = 1)
#------------------------Arvore de DecisÃ£o---------------------------------
# Carregando o pacote
install.packages("rpart")
install.packages("rpart")
library(rpart)
tree <- rpart(HIPERTENSO~.,
data=teste,
control=rpart.control(maxdepth = 3, cp=0))
# Plotando a Ã¡rvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(tree,
box.palette = paleta) # Paleta de cores
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste['r'] = teste_pred[,1] - teste_pred[,2]
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
boost0_O_vs_E <- ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) + #Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
boost0_O_vs_E
ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) + #Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
ggplot(teste, aes(x,HIPERTENSOS))
ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado'))
boost0_O_vs_E <- ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) +
Ploting
boost0_O_vs_E <- ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) +
#Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
boost0_O_vs_E <- ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) +
#Ploting
scale_color_viridis(discrete=TRUE, begin=.0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
boost0_O_vs_E <- ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) +
#Ploting
scale_color_viridis(discrete=TRUE, begin=.0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
#guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
boost0_O_vs_E
# GrÃ¡fico de resÃ­duos
boost0_res <- ggplot(df, aes(x,r)) +
geom_point(alpha=.7, size=.5, aes(colour='ResÃ­duo')) +
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
labs(title="GrÃ¡fico de resÃ­duos") +
scale_y_continuous(name= "r") +
scale_x_continuous(name= "x")
boost0_res
ggpubr::ggarrange(boost0_O_vs_E, boost0_res,
# labels = c("A", "B"),
ncol = 2, nrow = 1)
ggplot(teste, aes(x,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado'))
teste
View(teste)
boost0_O_vs_E <- ggplot(teste, aes(r,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) +
#Ploting
scale_color_viridis(discrete=TRUE, begin=.0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
#guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
ggplot(teste, aes(r,HIPERTENSOS))
ggplot(teste, aes(r,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado'))
boost0_O_vs_E <- ggplot(teste, aes(x ,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) +
#Ploting
scale_color_viridis(discrete=FALSE, begin=.0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
#guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
boost0_O_vs_E
boost0 <- ggplot(teste, aes(x ,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) +
#Ploting
scale_color_viridis(discrete=FALSE, begin=.0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
#guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
ggplot(teste, aes(x ,HIPERTENSOS)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,p, colour='Esperado')) +
#Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw()
teste_pred
teste
boost0 <- ggplot(teste, aes(x ,HIPERTENSO)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,y, colour='Esperado')) +
#Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
#guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
boost0
boost0 <- ggplot(teste, aes(x ,HIPERTENSO)) +
geom_point(alpha=.7, size=.5, aes(colour='Observado')) +
geom_path(aes(x,r, colour='Esperado')) +
#Ploting
scale_color_viridis(discrete=TRUE, begin=0, end=.8, name = "Dado: ") +
theme_bw() +
theme(legend.position="bottom") +
#guides(colour = guide_legend(label.position = "bottom")) +
labs(title="Valores observados vs esperados") +
scale_y_continuous(name= "hipertensos") +
scale_x_continuous(name= "x")
HIPER_tree <- rpart(HIPERTENSO ~ .,
data = teste,
method = "class", # Usa class pois o target e factor mais poderia ser "anova", "exp" ou "poisson"
parms = list(split = "information."), #The splitting index can be gini or information.
control = rpart.control(minsplit = 1))
HIPER_tree <- rpart(HIPERTENSO ~ .,
data = teste,
method = "class", # Usa class pois o target e factor mais poderia ser "anova", "exp" ou "poisson"
parms = list(split = "information."), #The splitting index can be gini or information.
control = rpart.control(minsplit = 1))
# Valores preditos
teste_pred = predict(tree, teste)
dim(teste_pred)
teste['r'] = teste_pred[,1] - teste_pred[,2]
# Gerando o plot
install.packages("rpart.plot")
install.packages("rpart.plot")
library(rpart.plot)
# Criando o modelo
?rpart
?rpart.control
HIPER_tree <- rpart(HIPERTENSO ~ .,
data = teste,
method = "class", # Usa class pois o target e factor mais poderia ser "anova", "exp" ou "poisson"
parms = list(split = "information."), #The splitting index can be gini or information.
control = rpart.control(minsplit = 1))
# Visualizando o ganho de informaÃ§Ã£o para cada atributo
HIPER_tree
# Gerando o plot
install.packages("rpart.plot")
install.packages("rpart.plot")
library(rpart.plot)
# Plot
?prp
prp(HIPER_tree, type = 0, extra = 1, under = TRUE, compress = TRUE)
teste %>% filter (teste$IDADE < 52 & teste$DIABETES == 0 & teste$HIPERTENSO == "HIPERT" )
teste %>% filter (teste$HIPERTENSO == "NAO_HIPER" & teste$IDADE >= 52)
teste
require(readr)
library(readr)
require(readxl)
library(readxl)
require(caret)
library(caret)
require(dplyr)
library(dplyr)
require(tidyverse)
library(tidyverse)
gc()
require(readr)
library(readr)
require(readxl)
library(readxl)
require(caret)
library(caret)
require(dplyr)
library(dplyr)
require(tidyverse)
library(tidyverse)
require(readr)
library(readr)
require(readxl)
library(readxl)
require(caret)
library(caret)
require(dplyr)
library(dplyr)
require(tidyverse)
library(tidyverse)
teste <- read_csv("teste.csv")
head(teste)
# verificar se existe NA no arquivo teste.csv
ver <- is.na(teste)
table(ver)
# transforma o arquivo em um data.frame
teste = data.frame(teste)
#Observar a estrutura do arquivo teste
glimpse(teste)
class(teste)
#transformar a variavel HIPERTENSO E IDADE EM FATOR
teste$HIPERTENSO<- as.factor(teste$HIPERTENSO)
teste$IDADE<- as.integer(teste$IDADE)
glimpse(teste)
class(teste)
tes_hiper<- filter(teste, HIPERTENSO == "HIPERT")
n<- filter(teste, HIPERTENSO == "NAO_HIPER")
n_hper<- n[1:400, ]
tes_bal = bind_rows(tes_hiper, n_hper)
install.packages("corrplot")
library(corrplot)
install.packages("corrgram")
library(corrgram)
testeG <- read_csv("testeG.csv")
#modulacao da base de dados, verifica um a um se e numerica
colunas_numericas <- sapply(testeG, is.numeric)
colunas_numericas
#Pacote que verifica a correlação entre as variaveis
data_cor <- cor(testeG[ ,colunas_numericas])
data_cor
# Plot do data_cor
corrplot(data_cor, method = 'color')
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorrplot(data_cor, hc.order = F,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
ggtheme=theme_bw)
# Criando dados de treino e dados de teste
set.seed(4444)
# Instalando os pacotes
install.packages("caret")
install.packages("caret")
install.packages("ROCR")
install.packages("ROCR")
install.packages("e1071")
install.packages("readr")
install.packages("readr")
# Carregando os pacotes
library(caret)
library(ROCR)
library(e1071)
library(readr)
testeG <- read_csv("testeG.csv")
View(testeG)
dim(testeG)
# balanceamento das variaveis
tes_hiper_G <- filter(testeG, HIPERTENSO == 1) # seleciona na amostra os HAS
dim(tes_hiper_G)
n_G<- filter(testeG, HIPERTENSO == 0) # seleciona na amostra os nao HAS
dim(n_G)
n_hper_G<-sample_frac(n_G, 0.60) # 60% de forma aleatoria
dim(n_hper_G)
tes_bal_G <- bind_rows(tes_hiper_G, n_hper_G)
dim(tes_bal_G)
testeG <- tes_bal_G[ ,-9] # retirado a variavel tuberculose
dim(testeG)
# Treinando o modelo
log.model <- glm(formula = HIPERTENSO ~ . , family = binomial(link ='logit'), data = testeG)
# Podemos ver que as variaveis Idade, Diabetes e Alcool sao as variaveis mais significantes
summary(log.model)
# Fazendo as previsoes nos dados de teste
library(caTools)
set.seed(4444)
# Split dos dados, de forma aleatoria seleciona 70% da amostra
split = sample.split(testeG$HIPERTENSO, SplitRatio = 0.70)
# os que se encontra como TRUE sao os emementos que foram selecionados
table(split)
# Datasets de treino e de teste
dados_treino= subset(testeG, split == TRUE) # 70% da amostra
dados_teste= subset(testeG, split == FALSE) # 30% da amostra
# Gerando o modelo com a versao final do dataset
final.log.model <- glm(formula = HIPERTENSO ~., family = binomial(link='logit'), data = dados_treino)
# Resumo
summary(final.log.model)
# Prevendo a acuracia
fitted.probabilities <- predict(final.log.model, newdata = dados_teste, type = 'response')
# Calculando os valores
fitted.results <- ifelse(fitted.probabilities > 0.5, 1, 0)
# Conseguimos em torna de 82% de acuracia
misClasificError <- mean(fitted.results != dados_teste$HIPERTENSO)
print(paste('Acuracia', 1-misClasificError))
# Criando a confusion matrix
table(dados_teste$HIPERTENSO, fitted.probabilities > 0.5)
---------------------------------------------------------------------------------------------------
# Avaliando a performance do modelo
# Plot do modelo com melhor acurácia
modelo_final <- final.log.model
previsoes <- predict(modelo_final, dados_teste , type = "response")
fitted.results
misClasificError
print(paste('Acuracia', 1-misClasificError))
# Criando a confusion matrix
table(dados_teste$HIPERTENSO, fitted.probabilities > 0.5)
# Criando a confusion matrix
table(dados_teste$HIPERTENSO, fitted.probabilities > 0.5)
---------------------------------------------------------------------------------------------------
# Avaliando a performance do modelo
# Plot do modelo com melhor acurácia
modelo_final <- final.log.model
previsoes <- predict(modelo_final, dados_teste , type = "response")
predict?
# Função para Plot ROC
plot.roc.curve <- function(predictions, title.text){
perf <- performance(predictions, "tpr", "fpr")
plot(perf,col = "black",lty = 1, lwd = 2,
main = title.text, cex.main = 0.6, cex.lab = 0.8,xaxs = "i", yaxs = "i")
abline(0,1, col = "red")
auc <- performance(predictions,"auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4,legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
}
predict?
predict?
# Função para Plot ROC
plot.roc.curve <- function(predictions, title.text){
perf <- performance(predictions, "tpr", "fpr")
plot(perf,col = "black",lty = 1, lwd = 2,
main = title.text, cex.main = 0.6, cex.lab = 0.8,xaxs = "i", yaxs = "i")
abline(0,1, col = "red")
auc <- performance(predictions,"auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4,legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
}
??predict
predict ??
# Função para Plot ROC
plot.roc.curve <- function(predictions, title.text){
perf <- performance(predictions, "tpr", "fpr")
plot(perf,col = "black",lty = 1, lwd = 2,
main = title.text, cex.main = 0.6, cex.lab = 0.8,xaxs = "i", yaxs = "i")
abline(0,1, col = "red")
auc <- performance(predictions,"auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4,legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
}
help("predict")
final.log.model
# Resumo
summary(final.log.model)
# Prevendo a acuracia
fitted.probabilities <- predict(final.log.model, newdata = dados_teste, type = 'response')
# Calculando os valores
fitted.results <- ifelse(fitted.probabilities > 0.5, 1, 0)
# Conseguimos em torna de 82% de acuracia
misClasificError <- mean(fitted.results != dados_teste$HIPERTENSO)
print(paste('Acuracia', 1-misClasificError))
View(dados_teste)
#Observar a estrutura do arquivo teste
glimpse(teste)
class(teste)
#transformar a variavel HIPERTENSO E IDADE EM FATOR
teste$HIPERTENSO<- as.factor(teste$HIPERTENSO)
teste$IDADE<- as.integer(teste$IDADE)
glimpse(teste)
class(teste)
library(readr)
library(readxl)
library(caret)
require(dplyr)
library(dplyr)
require(tidyverse)
library(tidyverse)
teste <- read_csv("teste.csv")
head(teste)
# verificar se existe NA no arquivo teste.csv
ver <- is.na(teste)
table(ver)
# transforma o arquivo em um data.frame
teste = data.frame(teste)
#Observar a estrutura do arquivo teste
glimpse(teste)
class(teste)
#transformar a variavel HIPERTENSO E IDADE EM FATOR
teste$HIPERTENSO<- as.factor(teste$HIPERTENSO)
teste$IDADE<- as.integer(teste$IDADE)
glimpse(teste)
class(teste)
tes_hiper<- filter(teste, HIPERTENSO == "HIPERT")
n<- filter(teste, HIPERTENSO == "NAO_HIPER")
setwd("C:/ws_STS_JAVA_NELIO/Space_Curso_Java_Nelio")
# Estruturando dados
teste1 < read.csv("teste.csv")
# Estruturando dados
teste1 <- read.csv("teste.csv")
teste1
head(teste1)
mult <- teste[1,2] * teste1[1,3]
mult
mult <- teste[1,1] * teste1[1,2]
teste[1,1]
teste1[1,1]
teste1[1,2]
mult <- teste1[1,2] * teste1[1,3]
setwd("~/TCC_USP_PROJ/TCC_USP")
